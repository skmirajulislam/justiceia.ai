generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                String           @id @default(uuid())
  address           String?
  created_at        DateTime         @default(now())
  email             String?          @unique
  password          String?
  first_name        String?
  last_name         String?
  phone             String?
  role              UserRole         @default(REGULAR_USER)
  kyc_type          KycType          @default(REGULAR)
  updated_at        DateTime         @default(now()) @updatedAt
  vkyc_completed    Boolean          @default(false)
  vkyc_completed_at DateTime?
  can_upload_reports Boolean         @default(false)
  reports           Report[]
  advocateProfile   AdvocateProfile?
  vkycDocuments     VkycDocument[]   @relation("UserVkycDocuments")

  @@map("profiles")
}

model AdvocateProfile {
  id                  String   @id @default(uuid())
  user_id             String   @unique
  specialization      String[]
  experience          Int
  bio                 String?
  education           String?
  certifications      String[]
  hourly_rate         Float
  location            String?
  languages           String[]
  image_url           String?
  is_verified         Boolean  @default(false)
  is_available        Boolean  @default(true)
  total_consultations Int      @default(0)
  total_earnings      Float    @default(0)
  rating              Float    @default(0)
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  profile             Profile  @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("advocate_profiles")
}

model Report {
  id                   String    @id @default(cuid())
  user_id              String
  title                String
  category             String
  description          String?
  pdf_url              String
  created_at           DateTime  @default(now())
  cloudinary_public_id String?
  court                String?
  date                 DateTime?
  tags                 String[]
  updated_at           DateTime  @updatedAt
  profile              Profile   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("Report")
}

model VkycDocument {
  id            String   @id @default(uuid())
  user_id       String
  document_type String
  document_url  String
  kyc_type      KycType  @default(REGULAR)
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt
  profile       Profile  @relation("UserVkycDocuments", fields: [user_id], references: [id], onDelete: Cascade)

  @@map("vkyc_documents")
}

model ConsultationRequest {
  id                String           @id @default(uuid())
  client_id         String
  advocate_id       String
  title             String
  description       String
  consultation_type ConsultationType
  status            RequestStatus    @default(PENDING)
  amount            Float
  scheduled_at      DateTime?
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  @@map("consultation_requests")
}

model Payment {
  id                String        @id @default(uuid())
  request_id        String        @unique
  client_id         String
  advocate_id       String
  amount            Float
  stripe_payment_id String?
  stripe_session_id String?       @unique
  status            PaymentStatus @default(PENDING)
  payment_method    String?
  processed_at      DateTime?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt

  @@map("payments")
}

model AccessGrant {
  id         String   @id @default(uuid())
  request_id String   @unique
  user_id    String
  granted_at DateTime @default(now())
  expires_at DateTime
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())

  @@map("access_grants")
}

model ChatMessage {
  id           String      @id @default(uuid())
  request_id   String
  sender_id    String
  receiver_id  String
  message      String
  message_type MessageType @default(TEXT)
  is_read      Boolean     @default(false)
  created_at   DateTime    @default(now())

  @@map("chat_messages")
}

model VideoCall {
  id            String     @id @default(uuid())
  request_id    String     @unique
  client_id     String
  advocate_id   String
  call_id       String     @unique
  status        CallStatus @default(PENDING)
  started_at    DateTime?
  ended_at      DateTime?
  duration      Int?
  recording_url String?
  created_at    DateTime   @default(now())

  @@map("video_calls")
}

model MonthlyEarnings {
  id                 String   @id @default(uuid())
  advocate_id        String
  year               Int
  month              Int
  total_amount       Float    @default(0)
  consultation_count Int      @default(0)
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt

  @@unique([advocate_id, year, month])
  @@map("monthly_earnings")
}

enum UserRole {
  REGULAR_USER
  BARRISTER
  LAWYER
  GOVERNMENT_OFFICIAL
}

enum KycType {
  REGULAR
  PROFESSIONAL
}

enum ConsultationType {
  VIDEO
  CHAT
  BOTH
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum MessageType {
  TEXT
  FILE
  IMAGE
}

enum CallStatus {
  PENDING
  ACTIVE
  ENDED
  FAILED
}
